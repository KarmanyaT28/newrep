import MySQLdb
from django.shortcuts import render, redirect
from django.http import HttpResponse
# import pandas as pd
import csv

# MySQL database connection
def connect_db():
    try:
        conn = MySQLdb.connect(
            host='rn000111667',       # e.g., 'localhost'
            user='ktyagi19',       # MySQL username
            password='Mysecurityengineer=99535', # MySQL password
            database='SECDEVDB', # MySQL database name
            port=3306                     # MySQL port (default is 3306)
        )
        return conn
    except MySQLdb.Error as e:
        print(f"Error connecting to MySQL: {e}")
        # return None

# Dashboard view to select an application
def dashboard(request):
    apps = ['CRM', 'DMA', 'DMM', 'DMU', 'DS3', 'GALAXY', 'MLA', 'NHI', 'OFF', 'RDM', 'RTS', 'STR', 'RPS']
    return render(request, 'dashboard.html', {'apps': apps})

# View to display and edit entries for a specific app
def edit_entries(request, app_name):
    conn = connect_db()
    cursor = conn.cursor()

    # Fetch the data for the selected application
    query = "SELECT * FROM sync_config WHERE app_name=%s"
    cursor.execute(query, (app_name,))
    entries = cursor.fetchall()

    if request.method == 'POST':
        # Handle adding a new entry
        secure_application_name = request.POST.get('Secure_Application_Name')
        application_mui = request.POST.get('Application_MUI')
        secure_environment = request.POST.get('Secure_Environment')
        secure_role_name = request.POST.get('Secure_Role_Name')
        member_identifier = request.POST.get('Member_Identifier')
        member_identifier_type = request.POST.get('Member_Identifier_Type')
        database_name = request.POST.get('Database_Name')
        batch_role_or_support_team_member = request.POST.get('Batch_Role_or_Support_Team_Member')
        restricted_to_ids = request.POST.get('Restricted_to_IDs')
        viewpoint_role = request.POST.get('Viewpoint_Role')
        role_complete = request.POST.get('Role_Complete')

        insert_query = """
            INSERT INTO sync_config (
                app_name, Secure_Application_Name, Application_MUI, Secure_Environment, 
                Secure_Role_Name, Member_Identifier, Member_Identifier_Type, Database_Name, 
                Batch_Role_or_Support_Team_Member, Restricted_to_IDs, Viewpoint_Role, Role_Complete
            ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
        """
        cursor.execute(insert_query, (
            app_name, secure_application_name, application_mui, secure_environment, 
            secure_role_name, member_identifier, member_identifier_type, database_name, 
            batch_role_or_support_team_member, restricted_to_ids, viewpoint_role, role_complete
        ))
        conn.commit()
        return redirect(f'/edit_entries/{app_name}/')

    return render(request, 'edit_entries.html', {'entries': entries, 'app_name': app_name})

# View to generate the CSV file


def generate_csv(request,app_name):
    # Create the HTTPRESPONSE object with the appropriate CSV header

    response = HttpResponse(content_type='text/csv')
    response['Content Disposition'] = 'attachment;filename="asset_data.csv"'


    writer = csv.writer(response)

    writer.writerow(['Asset','Role','Command'])


    # Retrieve data from the MYSQL table

    conn = connect_db()
    cursor = conn.cursor()

    #FETCH

    try:
        query = """
            SELECT Secure_Application_Name, Application_MUI, Secure_Environment, Secure_Role_Name, 
            Member_Identifier, Member_Identifier_Type, Database_Name,Batch_Role_or_Support_Team_Member, Restricted_to_IDs, Viewpoint_Role, Role_Complete
            FROM sync_config WHERE app_name=%s
            """
        # cursor.execute("""
        #     SELECT Secure_Application_Name, Application_MUI, Secure_Environment, Secure_Role_Name, 
        #     Member_Identifier, Member_Identifier_Type, Database_Name,Batch_Role_or_Support_Team_Member, Restricted_to_IDs, Viewpoint_Role, Role_Complete
        #     FROM sync_config WHERE app_name=%s
        #     """)

        
        cursor.execute(query, (app_name,))
        # rows = cursor.fetchall()
        rows = cursor.fetchall()
        print(f"Fetched rows: {len(rows)}")

        for row in rows:
            writer.writerow([row[0],f'Role={row[1]}',row[2]])


    except MySQLdb.Error as e:
        return HttpResponse(f"Database error: {e}",status=500)
    
    finally:
        cursor.close()
        conn.close()
    return response
    




def view_entries(request, app_name):
    conn = connect_db()
    cursor = conn.cursor()

    # Fetch all entries for the selected application
    query = "SELECT * FROM sync_config WHERE app_name = %s"
    cursor.execute(query, (app_name,))
    entries = cursor.fetchall()

    return render(request, 'view_entries.html', {
        'entries': entries,
        'app_name': app_name
    })



def delete_entry(request, entry_id, app_name):
    conn = connect_db()
    cursor = conn.cursor()

    # Delete the specific entry by ID
    delete_query = "DELETE FROM sync_config WHERE id = %s"
    cursor.execute(delete_query, (entry_id,))
    conn.commit()

    return redirect(f'/view_entries/{app_name}/')

