import MySQLdb
from django.shortcuts import render, redirect
from django.http import HttpResponse
import csv

# MySQL database connection
def connect_db():
    try:
        conn = MySQLdb.connect(
            host='rn000111667',       # e.g., 'localhost'
            user='ktyagi19',       # MySQL username
            password='Mysecurityengineer=99535', # MySQL password
            database='SECDEVDB', # MySQL database name
            port=3306                     # MySQL port (default is 3306)
        )
        return conn
    except MySQLdb.Error as e:
        print(f"Error connecting to MySQL: {e}")

# Dashboard view to select an application
def dashboard(request):
    apps = ['CRM', 'DMA', 'DMM', 'DMU', 'DS3', 'GALAXY', 'MLA', 'NHI', 'OFF', 'RDM', 'RTS', 'STR', 'RPS']
    return render(request, 'dashboard.html', {'apps': apps})

# View to display and edit entries for a specific app
def edit_entries(request, app_name):
    conn = connect_db()
    cursor = conn.cursor()

    # Fetch the data for the selected application
    query = "SELECT * FROM sync_config WHERE app_name=%s"
    cursor.execute(query, (app_name,))
    entries = cursor.fetchall()

    if request.method == 'POST':
        # Handle adding a new entry
        secure_application_name = request.POST.get('Secure_Application_Name')
        application_mui = request.POST.get('Application_MUI')
        secure_environment = request.POST.get('Secure_Environment')
        secure_role_name = request.POST.get('Secure_Role_Name')
        member_identifier = request.POST.get('Member_Identifier')
        member_identifier_type = request.POST.get('Member_Identifier_Type')
        database_name = request.POST.get('Database_Name')
        batch_role_or_support_team_member = request.POST.get('Batch_Role_or_Support_Team_Member')
        restricted_to_ids = request.POST.get('Restricted_to_IDs')
        viewpoint_role = request.POST.get('Viewpoint_Role')
        role_complete = request.POST.get('Role_Complete')

        insert_query = """
            INSERT INTO sync_config (
                app_name, Secure_Application_Name, Application_MUI, Secure_Environment, 
                Secure_Role_Name, Member_Identifier, Member_Identifier_Type, Database_Name, 
                Batch_Role_or_Support_Team_Member, Restricted_to_IDs, Viewpoint_Role, Role_Complete
            ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
        """
        cursor.execute(insert_query, (
            app_name, secure_application_name, application_mui, secure_environment, 
            secure_role_name, member_identifier, member_identifier_type, database_name, 
            batch_role_or_support_team_member, restricted_to_ids, viewpoint_role, role_complete
        ))
        conn.commit()
        return redirect(f'/edit_entries/{app_name}/')

    return render(request, 'edit_entries.html', {'entries': entries, 'app_name': app_name})

# View to generate the CSV file
def generate_csv(request, app_name):
    response = HttpResponse(content_type='text/csv')
    response['Content-Disposition'] = 'attachment; filename="sync_RPS.csv"'

    writer = csv.writer(response)
    writer.writerow(['Secure Application Name', 'Application MUI', 'Secure Environment', 
                     'Secure Role Name', 'Member Identifier Type', 'Member Identifier', 
                     'Database Name', 'Batch Role or Support Team Member', 
                     'Restricted to IDs', 'Viewpoint Role', 'Role Complete'])

    conn = connect_db()
    cursor = conn.cursor()

    try:
        query = """
            SELECT Secure_Application_Name, Application_MUI, Secure_Environment, Secure_Role_Name, 
            Member_Identifier_Type, Member_Identifier, Database_Name, Batch_Role_or_Support_Team_Member, 
            Restricted_to_IDs, Viewpoint_Role, Role_Complete
            FROM sync_config WHERE app_name=%s
        """
        cursor.execute(query, (app_name,))
        rows = cursor.fetchall()

        for row in rows:
            writer.writerow(row)

    except MySQLdb.Error as e:
        return HttpResponse(f"Database error: {e}", status=500)
    
    finally:
        cursor.close()
        conn.close()

    return response

def view_entries(request, app_name):
    conn = connect_db()
    cursor = conn.cursor()

    # Fetch all entries for the selected application
    query = "SELECT * FROM sync_config WHERE app_name = %s"
    cursor.execute(query, (app_name,))
    entries = cursor.fetchall()

    return render(request, 'view_entries.html', {
        'entries': entries,
        'app_name': app_name
    })

def delete_entry(request, entry_id, app_name):
    conn = connect_db()
    cursor = conn.cursor()

    # Delete the specific entry by ID
    delete_query = "DELETE FROM sync_config WHERE id = %s"
    cursor.execute(delete_query, (entry_id,))
    conn.commit()

    return redirect(f'/view_entries/{app_name}/')
2. templates/dashboard.html
The dashboard allows users to select an application and navigate to the VIEW or ADD options.

html
Copy code
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f4f4;
            margin: 0;
            padding: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            flex-direction: column;
        }
        h1 {
            color: #333;
        }
        select, button {
            padding: 10px;
            margin: 10px;
            font-size: 16px;
            border: 1px solid #ccc;
            border-radius: 5px;
        }
        button {
            background-color: #5cb85c;
            color: white;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }
        button:hover {
            background-color: #4cae4c;
        }
        .container {
            text-align: center;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Select an Application</h1>
        <select id="appSelect">
            <option value="">--Select an Application--</option>
            {% for app in apps %}
                <option value="{{ app }}">{{ app }}</option>
            {% endfor %}
        </select>
        <br>
        <button onclick="navigateTo()">Proceed</button>
    </div>

    <script>
        function navigateTo() {
            const app = document.getElementById("appSelect").value;
            if (app) {
                window.location.href = `/edit_entries/${app}/`;
            } else {
                alert("Please select an application.");
            }
        }
    </script>
</body>
</html>
3. templates/edit_entries.html
This page handles adding new entries and displays the existing entries.

html
Copy code
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edit Entries - {{ app_name }}</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f4f4;
            margin: 0;
            padding: 20px;
        }
        h1 {
            color: #333;
        }
        form {
            background-color: #fff;
            padding: 20px;
            border-radius: 5px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }
        input, select, button {
            padding: 10px;
            margin: 10px 0;
            font-size: 16px;
            border: 1px solid #ccc;
            border-radius: 5px;
            width: calc(100% - 22px);
        }
        button {
            background-color: #5cb85c;
            color: white;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }
        button:hover {
            background-color: #4cae4c;
        }
        .entry-table {
            margin-top: 20px;
            width: 100%;
            border-collapse: collapse;
        }
        .entry-table th, .entry-table td {
            border: 1px solid #ddd;
            padding: 8px;
        }
        .entry-table th {
            background-color: #f2f2f2;
        }
    </style>
</head>
<body>
    <h1>Edit Entries - {{ app_name }}</h1>

    <form method="POST">
        {% csrf_token %}
        <input type="text" name="Secure_Application_Name" placeholder="Secure Application Name" required>
        <input type="text" name="Application_MUI" placeholder="Application MUI" required>
        <input type="text" name="Secure_Environment" placeholder="Secure Environment" required>
        <input type="text" name="Secure_Role_Name" placeholder="Secure Role Name" required>
        <input type="text" name="Member_Identifier" placeholder="Member Identifier" required>
        <select name="Member_Identifier_Type" required>
            <option value="">Select Member Identifier Type</option>
            <option value="Teradata Database Role">Teradata Database Role</option>
            <option value="DB2 Database Role">DB2 Database Role</option>
            <option value="Oracle Database Role">Oracle Database Role</option>
            <option value="MySQL Database Role">MySQL Database Role</option>
        </select>
        <input type="text" name="Database_Name" placeholder="Database Name">
        <input type="text" name="Batch_Role_or_Support_Team_Member" placeholder="Batch Role or Support Team Member" required>
        <input type="text" name="Restricted_to_IDs" placeholder="Restricted to IDs">
        <input type="text" name="Viewpoint_Role" placeholder="Viewpoint Role" required>
        <input type="text" name="Role_Complete" placeholder="Role Complete" required>
        <button type="submit">Add Entry</button>
    </form>

    <table class="entry-table">
        <thead>
            <tr>
                <th>Secure Application Name</th>
                <th>Application MUI</th>
                <th>Secure Environment</th>
                <th>Secure Role Name</th>
                <th>Member Identifier</th>
                <th>Member Identifier Type</th>
                <th>Database Name</th>
                <th>Batch Role or Support Team Member</th>
                <th>Restricted to IDs</th>
                <th>Viewpoint Role</th>
                <th>Role Complete</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            {% for entry in entries %}
                <tr>
                    <td>{{ entry.1 }}</td>
                    <td>{{ entry.2 }}</td>
                    <td>{{ entry.3 }}</td>
                    <td>{{ entry.4 }}</td>
                    <td>{{ entry.5 }}</td>
                    <td>{{ entry.6 }}</td>
                    <td>{{ entry.7 }}</td>
                    <td>{{ entry.8 }}</td>
                    <td>{{ entry.9 }}</td>
                    <td>{{ entry.10 }}</td>
                    <td>{{ entry.11 }}</td>
                    <td>
                        <a href="/delete_entry/{{ entry.0 }}/{{ app_name }}/" style="color:red;">Delete</a>
                    </td>
                </tr>
            {% endfor %}
        </tbody>
    </table>

    <a href="/generate_csv/{{ app_name }}/" style="display:block; margin-top: 20px;">Download CSV</a>
</body>
</html>
4. templates/view_entries.html
This page displays entries in a styled manner.

html
Copy code
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>View Entries - {{ app_name }}</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f4f4;
            margin: 0;
            padding: 20px;
        }
        h1 {
            color: #333;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }
        th, td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }
        th {
            background-color: #f2f2f2;
        }
        tr:hover {
            background-color: #f1f1f1;
        }
    </style>
</head>
<body>
    <h1>View Entries - {{ app_name }}</h1>

    <table>
        <thead>
            <tr>
                <th>Secure Application Name</th>
                <th>Application MUI</th>
                <th>Secure Environment</th>
                <th>Secure Role Name</th>
                <th>Member Identifier</th>
                <th>Member Identifier Type</th>
                <th>Database Name</th>
                <th>Batch Role or Support Team Member</th>
                <th>Restricted to IDs</th>
                <th>Viewpoint Role</th>
                <th>Role Complete</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            {% for entry in entries %}
                <tr>
                    <td>{{ entry.1 }}</td>
                    <td>{{ entry.2 }}</td>
                    <td>{{ entry.3 }}</td>
                    <td>{{ entry.4 }}</td>
                    <td>{{ entry.5 }}</td>
                    <td>{{ entry.6 }}</td>
                    <td>{{ entry.7 }}</td>
                    <td>{{ entry.8 }}</td>
                    <td>{{ entry.9 }}</td>
                    <td>{{ entry.10 }}</td>
                    <td>{{ entry.11 }}</td>
                    <td>
                        <a href="/delete_entry/{{ entry.0 }}/{{ app_name }}/" style="color:red;">Delete</a>
                    </td>
                </tr>
            {% endfor %}
        </tbody>
    </table>

    <a href="/generate_csv/{{ app_name }}/" style="display:block; margin-top: 20px;">Download CSV</a>
</body>
</html>
Summary of Changes
Styling: Added inline CSS to enhance the visual appeal of the dashboard and entry forms.
JavaScript: Simple navigation logic to redirect users based on selected applications.
Form Functionality: The form in the edit_entries.html page uses placeholders for the chosen application.
View Entries: Entries are displayed in a structured table format, maintaining professional design.
CSV Download: A link is provided to download the CSV file for the selected application.
You can copy and paste this code into your Django project, ensuring you have the corresponding routes set up correctly. If you need further adjustments or enhancements, feel free to ask!






