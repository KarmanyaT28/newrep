from django.shortcuts import render, redirect
from django.db import connection
from django.contrib.auth.decorators import login_required

# Secure Role Details Form
@login_required
def secure_role_form(request, intake_form_id):
    # Fetch all secure role details for this intake_form_id
    with connection.cursor() as cursor:
        cursor.execute("SELECT id, secenv, secure_application, secure_role, secure_role_approvers, as_of FROM secure_role_details WHERE intake_form_id = %s", [intake_form_id])
        secure_role_entries = cursor.fetchall()

    if request.method == 'POST':
        # Handle form submissions for adding new entries
        if 'add_secure_role' in request.POST:
            secenv = request.POST['secenv']
            secure_application = request.POST['secure_application']
            secure_role = request.POST['secure_role']
            secure_role_approvers = request.POST['secure_role_approvers']
            as_of = request.POST['as_of']

            with connection.cursor() as cursor:
                cursor.execute("""
                    INSERT INTO secure_role_details (intake_form_id, secenv, secure_application, secure_role, secure_role_approvers, as_of)
                    VALUES (%s, %s, %s, %s, %s, %s)
                """, [intake_form_id, secenv, secure_application, secure_role, secure_role_approvers, as_of])

        # Handle form submissions for "Save & Next"
        if 'save_next' in request.POST:
            return redirect('role_modification_form', intake_form_id=intake_form_id)

    context = {
        'secure_role_entries': secure_role_entries,
        'intake_form_id': intake_form_id,
    }
    return render(request, 'intake/secure_role_form.html', context)

@login_required
def edit_secure_role(request, entry_id, intake_form_id):
    if request.method == 'POST':
        secenv = request.POST['secenv']
        secure_application = request.POST['secure_application']
        secure_role = request.POST['secure_role']
        secure_role_approvers = request.POST['secure_role_approvers']
        as_of = request.POST['as_of']

        with connection.cursor() as cursor:
            cursor.execute("""
                UPDATE secure_role_details SET secenv=%s, secure_application=%s, secure_role=%s, secure_role_approvers=%s, as_of=%s
                WHERE id=%s
            """, [secenv, secure_application, secure_role, secure_role_approvers, as_of, entry_id])

        return redirect('secure_role_form', intake_form_id=intake_form_id)

    with connection.cursor() as cursor:
        cursor.execute("SELECT secenv, secure_application, secure_role, secure_role_approvers, as_of FROM secure_role_details WHERE id = %s", [entry_id])
        secure_role_data = cursor.fetchone()

    return render(request, 'intake/edit_secure_role.html', {'secure_role_data': secure_role_data, 'intake_form_id': intake_form_id})

@login_required
def delete_secure_role(request, entry_id, intake_form_id):
    with connection.cursor() as cursor:
        cursor.execute("DELETE FROM secure_role_details WHERE id = %s", [entry_id])
    return redirect('secure_role_form', intake_form_id=intake_form_id)

# Role Modification Log Form
@login_required
def role_modification_form(request, intake_form_id):
    # Fetch all role modification log entries
    with connection.cursor() as cursor:
        cursor.execute("SELECT id, request_number, change_description, security_administrator_assigned, requesting_team_director_approval FROM role_modification_log WHERE intake_form_id = %s", [intake_form_id])
        role_mod_entries = cursor.fetchall()

    if request.method == 'POST':
        if 'add_role_modification' in request.POST:
            request_number = request.POST['request_number']
            change_description = request.POST['change_description']
            security_administrator_assigned = request.POST['security_administrator_assigned']
            requesting_team_director_approval = request.POST['requesting_team_director_approval']

            with connection.cursor() as cursor:
                cursor.execute("""
                    INSERT INTO role_modification_log (intake_form_id, request_number, change_description, security_administrator_assigned, requesting_team_director_approval)
                    VALUES (%s, %s, %s, %s, %s)
                """, [intake_form_id, request_number, change_description, security_administrator_assigned, requesting_team_director_approval])

        if 'save_next' in request.POST:
            return redirect('data_req_form', intake_form_id=intake_form_id)

    context = {
        'role_mod_entries': role_mod_entries,
        'intake_form_id': intake_form_id,
    }
    return render(request, 'intake/role_modification_form.html', context)

@login_required
def edit_role_modification(request, entry_id, intake_form_id):
    if request.method == 'POST':
        request_number = request.POST['request_number']
        change_description = request.POST['change_description']
        security_administrator_assigned = request.POST['security_administrator_assigned']
        requesting_team_director_approval = request.POST['requesting_team_director_approval']

        with connection.cursor() as cursor:
            cursor.execute("""
                UPDATE role_modification_log SET request_number=%s, change_description=%s, security_administrator_assigned=%s, requesting_team_director_approval=%s
                WHERE id=%s
            """, [request_number, change_description, security_administrator_assigned, requesting_team_director_approval, entry_id])

        return redirect('role_modification_form', intake_form_id=intake_form_id)

    with connection.cursor() as cursor:
        cursor.execute("SELECT request_number, change_description, security_administrator_assigned, requesting_team_director_approval FROM role_modification_log WHERE id = %s", [entry_id])
        role_mod_data = cursor.fetchone()

    return render(request, 'intake/edit_role_modification.html', {'role_mod_data': role_mod_data, 'intake_form_id': intake_form_id})

@login_required
def delete_role_modification(request, entry_id, intake_form_id):
    with connection.cursor() as cursor:
        cursor.execute("DELETE FROM role_modification_log WHERE id = %s", [entry_id])
    return redirect('role_modification_form', intake_form_id=intake_form_id)

# Data Requirements Form
@login_required
def data_req_form(request, intake_form_id):
    # Fetch all data requirements entries
    with connection.cursor() as cursor:
        cursor.execute("SELECT id, database_name, environment, access_rights, business_justification FROM data_req WHERE intake_form_id = %s", [intake_form_id])
        data_req_entries = cursor.fetchall()

    if request.method == 'POST':
        if 'add_data_req' in request.POST:
            database_name = request.POST['database_name']
            environment = request.POST['environment']
            access_rights = request.POST['access_rights']
            business_justification = request.POST['business_justification']

            with connection.cursor() as cursor:
                cursor.execute("""
                    INSERT INTO data_req (intake_form_id, database_name, environment, access_rights, business_justification)
                    VALUES (%s, %s, %s, %s, %s)
                """, [intake_form_id, database_name, environment, access_rights, business_justification])

        if 'save_next' in request.POST:
            return redirect('host_req_form', intake_form_id=intake_form_id)

    context = {
        'data_req_entries': data_req_entries,
        'intake_form_id': intake_form_id,
    }
    return render(request, 'intake/data_req_form.html', context)

@login_required
def edit_data_req(request, entry_id, intake_form_id):
    if request.method == 'POST':
        database_name = request.POST['database_name']
        environment = request.POST['environment']
        access_rights = request.POST['access_rights']
        business_justification = request.POST['business_justification']

        with connection.cursor() as cursor:
            cursor.execute("""
                UPDATE data_req SET database_name=%s, environment=%s, access_rights=%s, business_justification=%s
                WHERE id=%s
            """, [database_name, environment, access_rights, business_justification, entry_id])

        return redirect('data_req_form', intake_form_id=intake_form_id)

    with connection.cursor() as cursor:
        cursor.execute("SELECT database_name, environment, access_rights, business_justification FROM data_req WHERE id = %s", [entry_id])
        data_req_data = cursor.fetchone()

    return render(request, 'intake/edit_data_req.html', {'data_req_data': data_req_data, 'intake_form_id': intake_form_id})

@login_required
def delete_data_req(request, entry_id, intake_form_id):
    with connection.cursor() as cursor:
        cursor.execute("DELETE FROM data_req WHERE id = %s", [entry_id])
    return redirect('data_req_form', intake_form_id=intake_form_id)

# Host Requirements Form
@login_required
def host_req_form(request, intake_form_id):
    # Fetch all host requirements entries
    with connection.cursor() as cursor:
        cursor.execute("SELECT id, host, env, level_of_access, business_justification FROM host_req WHERE intake_form_id = %s", [intake_form_id])
        host_req_entries = cursor.fetchall()

    if request.method == 'POST':
        if 'add_host_req' in request.POST:
            host = request.POST['host']
            env = request.POST['env']
            level_of_access = request.POST['level_of_access']
            business_justification = request.POST['business_justification']

            with connection.cursor() as cursor:
                cursor.execute("""
                    INSERT INTO host_req (intake_form_id, host, env, level_of_access, business_justification)
                    VALUES (%s, %s, %s, %s, %s)
                """, [intake_form_id, host, env, level_of_access, business_justification])

        if 'save_next' in request.POST:
            return redirect('group_req_form', intake_form_id=intake_form_id)

    context = {
        'host_req_entries': host_req_entries,
        'intake_form_id': intake_form_id,
    }
    return render(request, 'intake/host_req_form.html', context)

@login_required
def edit_host_req(request, entry_id, intake_form_id):
    if request.method == 'POST':
        host = request.POST['host']
        env = request.POST['env']
        level_of_access = request.POST['level_of_access']
        business_justification = request.POST['business_justification']

        with connection.cursor() as cursor:
            cursor.execute("""
                UPDATE host_req SET host=%s, env=%s, level_of_access=%s, business_justification=%s
                WHERE id=%s
            """, [host, env, level_of_access, business_justification, entry_id])

        return redirect('host_req_form', intake_form_id=intake_form_id)

    with connection.cursor() as cursor:
        cursor.execute("SELECT host, env, level_of_access, business_justification FROM host_req WHERE id = %s", [entry_id])
        host_req_data = cursor.fetchone()

    return render(request, 'intake/edit_host_req.html', {'host_req_data': host_req_data, 'intake_form_id': intake_form_id})

@login_required
def delete_host_req(request, entry_id, intake_form_id):
    with connection.cursor() as cursor:
        cursor.execute("DELETE FROM host_req WHERE id = %s", [entry_id])
    return redirect('host_req_form', intake_form_id=intake_form_id)

# Group Requirements Form
@login_required
def group_req_form(request, intake_form_id):
    # Fetch all group requirements entries
    with connection.cursor() as cursor:
        cursor.execute("SELECT id, group_name, group_type, description, business_justification FROM group_req WHERE intake_form_id = %s", [intake_form_id])
        group_req_entries = cursor.fetchall()

    if request.method == 'POST':
        if 'add_group_req' in request.POST:
            group_name = request.POST['group_name']
            group_type = request.POST['group_type']
            description = request.POST['description']
            business_justification = request.POST['business_justification']

            with connection.cursor() as cursor:
                cursor.execute("""
                    INSERT INTO group_req (intake_form_id, group_name, group_type, description, business_justification)
                    VALUES (%s, %s, %s, %s, %s)
                """, [intake_form_id, group_name, group_type, description, business_justification])

        if 'save_next' in request.POST:
            return redirect('preview_form', intake_form_id=intake_form_id)

    context = {
        'group_req_entries': group_req_entries,
        'intake_form_id': intake_form_id,
    }
    return render(request, 'intake/group_req_form.html', context)

@login_required
def edit_group_req(request, entry_id, intake_form_id):
    if request.method == 'POST':
        group_name = request.POST['group_name']
        group_type = request.POST['group_type']
        description = request.POST['description']
        business_justification = request.POST['business_justification']

        with connection.cursor() as cursor:
            cursor.execute("""
                UPDATE group_req SET group_name=%s, group_type=%s, description=%s, business_justification=%s
                WHERE id=%s
            """, [group_name, group_type, description, business_justification, entry_id])

        return redirect('group_req_form', intake_form_id=intake_form_id)

    with connection.cursor() as cursor:
        cursor.execute("SELECT group_name, group_type, description, business_justification FROM group_req WHERE id = %s", [entry_id])
        group_req_data = cursor.fetchone()

    return render(request, 'intake/edit_group_req.html', {'group_req_data': group_req_data, 'intake_form_id': intake_form_id})

@login_required
def delete_group_req(request, entry_id, intake_form_id):
    with connection.cursor() as cursor:
        cursor.execute("DELETE FROM group_req WHERE id = %s", [entry_id])
    return redirect('group_req_form', intake_form_id=intake_form_id)
