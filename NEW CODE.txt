
Hereâ€™s the complete code for your Django web application, including the enhanced inline CSS for a professional appearance. The code consists of the views.py, HTML files, and CSS styles to create a cohesive and functional application.

1. views.py
python
Copy code
import MySQLdb
from django.shortcuts import render, redirect
from django.http import HttpResponse
import csv

# MySQL database connection
def connect_db():
    try:
        conn = MySQLdb.connect(
            host='rn000111667',       # e.g., 'localhost'
            user='ktyagi19',       # MySQL username
            password='Mysecurityengineer=99535', # MySQL password
            database='SECDEVDB', # MySQL database name
            port=3306                     # MySQL port (default is 3306)
        )
        return conn
    except MySQLdb.Error as e:
        print(f"Error connecting to MySQL: {e}")

# Dashboard view to select an application
def dashboard(request):
    apps = ['CRM', 'DMA', 'DMM', 'DMU', 'DS3', 'GALAXY', 'MLA', 'NHI', 'OFF', 'RDM', 'RTS', 'STR', 'RPS']
    return render(request, 'dashboard.html', {'apps': apps})

# View to display and edit entries for a specific app
def edit_entries(request, app_name):
    conn = connect_db()
    cursor = conn.cursor()

    # Fetch the data for the selected application
    query = "SELECT * FROM sync_config WHERE app_name=%s"
    cursor.execute(query, (app_name,))
    entries = cursor.fetchall()

    if request.method == 'POST':
        # Handle adding a new entry
        secure_application_name = request.POST.get('Secure_Application_Name')
        application_mui = request.POST.get('Application_MUI')
        secure_environment = request.POST.get('Secure_Environment')
        secure_role_name = request.POST.get('Secure_Role_Name')
        member_identifier = request.POST.get('Member_Identifier')
        member_identifier_type = request.POST.get('Member_Identifier_Type')
        database_name = request.POST.get('Database_Name')
        batch_role_or_support_team_member = request.POST.get('Batch_Role_or_Support_Team_Member')
        restricted_to_ids = request.POST.get('Restricted_to_IDs')
        viewpoint_role = request.POST.get('Viewpoint_Role')
        role_complete = request.POST.get('Role_Complete')

        insert_query = """
            INSERT INTO sync_config (
                app_name, Secure_Application_Name, Application_MUI, Secure_Environment, 
                Secure_Role_Name, Member_Identifier, Member_Identifier_Type, Database_Name, 
                Batch_Role_or_Support_Team_Member, Restricted_to_IDs, Viewpoint_Role, Role_Complete
            ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
        """
        cursor.execute(insert_query, (
            app_name, secure_application_name, application_mui, secure_environment, 
            secure_role_name, member_identifier, member_identifier_type, database_name, 
            batch_role_or_support_team_member, restricted_to_ids, viewpoint_role, role_complete
        ))
        conn.commit()
        return redirect(f'/edit_entries/{app_name}/')

    return render(request, 'edit_entries.html', {'entries': entries, 'app_name': app_name})

# View to generate the CSV file
def generate_csv(request, app_name):
    response = HttpResponse(content_type='text/csv')
    response['Content-Disposition'] = 'attachment; filename="asset_data.csv"'

    writer = csv.writer(response)
    writer.writerow(['Asset', 'Role', 'Command'])

    # Retrieve data from the MySQL table
    conn = connect_db()
    cursor = conn.cursor()

    try:
        query = """
            SELECT Secure_Application_Name, Application_MUI, Secure_Environment, Secure_Role_Name, 
            Member_Identifier, Member_Identifier_Type, Database_Name, Batch_Role_or_Support_Team_Member, 
            Restricted_to_IDs, Viewpoint_Role, Role_Complete
            FROM sync_config WHERE app_name=%s
        """
        cursor.execute(query, (app_name,))
        rows = cursor.fetchall()

        for row in rows:
            writer.writerow([row[0], f'Role={row[1]}', row[2]])

    except MySQLdb.Error as e:
        return HttpResponse(f"Database error: {e}", status=500)

    finally:
        cursor.close()
        conn.close()
    return response

def view_entries(request, app_name):
    conn = connect_db()
    cursor = conn.cursor()

    # Fetch all entries for the selected application
    query = "SELECT * FROM sync_config WHERE app_name = %s"
    cursor.execute(query, (app_name,))
    entries = cursor.fetchall()

    return render(request, 'view_entries.html', {
        'entries': entries,
        'app_name': app_name
    })

def delete_entry(request, entry_id, app_name):
    conn = connect_db()
    cursor = conn.cursor()

    # Delete the specific entry by ID
    delete_query = "DELETE FROM sync_config WHERE id = %s"
    cursor.execute(delete_query, (entry_id,))
    conn.commit()

    return redirect(f'/view_entries/{app_name}/')
2. dashboard.html
html
Copy code
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard</title>
    <link rel="stylesheet" href="{% static 'styles.css' %}">
</head>
<body>
    <div class="container">
        <h1>Dashboard</h1>
        <h2>Select an Application</h2>
        <ul>
            {% for app in apps %}
                <li><a href="{% url 'edit_entries' app %}">{{ app }}</a></li>
            {% endfor %}
        </ul>
    </div>
</body>
</html>
3. edit_entries.html
html
Copy code
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edit Entries - {{ app_name }}</title>
    <link rel="stylesheet" href="{% static 'styles.css' %}">
</head>
<body>
    <div class="container">
        <h1>Edit Entries for {{ app_name }}</h1>
        <form method="POST">
            {% csrf_token %}
            <label for="Secure_Application_Name">Secure Application Name</label>
            <input type="text" id="Secure_Application_Name" name="Secure_Application_Name" required>
            
            <label for="Application_MUI">Application MUI</label>
            <input type="text" id="Application_MUI" name="Application_MUI" required>
            
            <label for="Secure_Environment">Secure Environment</label>
            <select id="Secure_Environment" name="Secure_Environment" required>
                <option value="Production">Production</option>
                <option value="Staging">Staging</option>
                <option value="Development">Development</option>
            </select>

            <label for="Secure_Role_Name">Secure Role Name</label>
            <input type="text" id="Secure_Role_Name" name="Secure_Role_Name" required>
            
            <label for="Member_Identifier">Member Identifier</label>
            <input type="text" id="Member_Identifier" name="Member_Identifier">
            
            <label for="Member_Identifier_Type">Member Identifier Type</label>
            <select id="Member_Identifier_Type" name="Member_Identifier_Type">
                <option value="Restricted to IDs">Restricted to IDs</option>
                <option value="Teradata database role">Teradata database role</option>
                <option value="DB2 database role">DB2 database role</option>
                <option value="MySQL database role">MySQL database role</option>
                <option value="Azure group">Azure group</option>
            </select>
            
            <label for="Database_Name">Database Name</label>
            <input type="text" id="Database_Name" name="Database_Name">
            
            <label for="Batch_Role_or_Support_Team_Member">Batch Role or Support Team Member</label>
            <select id="Batch_Role_or_Support_Team_Member" name="Batch_Role_or_Support_Team_Member">
                <option value="Batch Role">Batch Role</option>
                <option value="Support Team Member">Support Team Member</option>
            </select>

            <label for="Restricted_to_IDs">Restricted to IDs</label>
            <input type="text" id="Restricted_to_IDs" name="Restricted_to_IDs">

            <label for="Viewpoint_Role">Viewpoint Role</label>
            <input type="text" id="Viewpoint_Role" name="Viewpoint_Role">

            <label for="Role_Complete">Role Complete</label>
            <input type="text" id="Role_Complete" name="Role_Complete">

            <button type="submit">Add Entry</button>
        </form>

        <div class="entry-list">
            <h2>Existing Entries</h2>
            {% for entry in entries %}
                <div class="entry">
                    <p>{{ entry }}</p>
                    <form method="POST" action="{% url 'delete_entry' entry.id app_name %}">
                        {% csrf_token %}
                        <button type="submit" class="delete-button">Delete</button>
                    </form>
                </div>
            {% endfor %}
        </div>
    </div>
</body>
</html>
4. view_entries.html
html
Copy code
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>View Entries - {{ app_name }}</title>
    <link rel="stylesheet" href="{% static 'styles.css' %}">
</head>
<body>
    <div class="container">
        <h1>View Entries for {{ app_name }}</h1>
        <table>
            <thead>
                <tr>
                    <th>Secure Application Name</th>
                    <th>Application MUI</th>
                    <th>Secure Environment</th>
                    <th>Secure Role Name</th>
                    <th>Member Identifier</th>
                    <th>Member Identifier Type</th>
                    <th>Database Name</th>
                    <th>Batch Role or Support Team Member</th>
                    <th>Restricted to IDs</th>
                    <th>Viewpoint Role</th>
                    <th>Role Complete</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                {% for entry in entries %}
                    <tr>
                        <td>{{ entry.0 }}</td>
                        <td>{{ entry.1 }}</td>
                        <td>{{ entry.2 }}</td>
                        <td>{{ entry.3 }}</td>
                        <td>{{ entry.4 }}</td>
                        <td>{{ entry.5 }}</td>
                        <td>{{ entry.6 }}</td>
                        <td>{{ entry.7 }}</td>
                        <td>{{ entry.8 }}</td>
                        <td>{{ entry.9 }}</td>
                        <td>{{ entry.10 }}</td>
                        <td>
                            <form method="POST" action="{% url 'delete_entry' entry.id app_name %}">
                                {% csrf_token %}
                                <button type="submit" class="delete-button">Delete</button>
                            </form>
                        </td>
                    </tr>
                {% endfor %}
            </tbody>
        </table>
        <a href="{% url 'generate_csv' app_name %}">Download CSV</a>
    </div>
</body>
</html>
5. styles.css
css
Copy code
/* General Reset */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

/* Body Styles */
body {
    font-family: 'Arial', sans-serif;
    background-color: #f4f4f4;
    color: #333;
    line-height: 1.6;
}

/* Container for Content */
.container {
    width: 90%;
    max-width: 800px;
    margin: 20px auto;
    padding: 20px;
    background: white;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
}

/* Headings */
h1, h2, h3, h4 {
    margin-bottom: 10px;
    color: #2c3e50;
}

/* Form Styles */
form {
    margin: 20px 0;
}

/* Labels */
label {
    display: block;
    margin: 10px 0 5px;
    font-weight: bold;
}

/* Input Fields */
input[type="text"],
input[type="email"],
select {
    width: 100%;
    padding: 10px;
    margin: 5px 0 20px;
    border: 1px solid #ccc;
    border-radius: 4px;
    transition: border 0.3s;
}

input[type="text"]:focus,
input[type="email"]:focus,
select:focus {
    border: 1px solid #3498db;
}

/* Buttons */
button {
    padding: 10px 15px;
    background: #3498db;
    border: none;
    color: white;
    border-radius: 4px;
    cursor: pointer;
    transition: background 0.3s;
}

button:hover {
    background: #2980b9;
}

/* Entry List Styles */
.entry-list {
    margin-top: 20px;
}

.entry {
    border: 1px solid #ddd;
    padding: 15px;
    margin: 10px 0;
    border-radius: 4px;
    background: #ecf0f1;
}

/* Delete Button */
.delete-button {
    background: #e74c3c;
    border: none;
    padding: 5px 10px;
    color: white;
    border-radius: 4px;
    cursor: pointer;
    transition: background 0.3s;
}

.delete-button:hover {
    background: #c0392b;
}

/* Responsive Styles */
@media (max-width: 600px) {
    .container {
        width: 95%;
        padding: 10px;
    }
}
Summary
This complete code set includes:

Django Views: The views.py contains the logic for database connection, rendering templates, handling form submissions, and generating CSV downloads.
HTML Templates: The dashboard.html, edit_entries.html, and view_entries.html files present a user-friendly interface for managing entries.
CSS Styles: The styles.css file enhances the appearance of your application, providing a clean and modern look.
Next Steps
Make sure to update the database connection details in views.py to match your environment.
Include necessary URLs in your urls.py to ensure the views work as expected.
Test the application locally to confirm everything is functioning correctly.
Let me know if you need any more adjustments or additions!
